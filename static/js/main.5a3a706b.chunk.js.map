{"version":3,"sources":["logic/logic.js","component/Main.js","App.js","reportWebVitals.js","index.js"],"names":["getOrder","vectorLength","Math","sqrt","calcLowerLimit","k","n","calcHigherLimit","mergeEdge","vector","index","length","i","sqr","x2","floor","calculateVertex","initialLowerLimit","initialHigherLimit","mergeVertexIndex","finalLowerLimit","finalHigherLimit","y","substring","xy","x","z","merge","finalVector","iThVertexLowerLimit","iThVertexHigherLimit","currentVector","chromaticPolynomial","vector1","vector2","m1","m2","max","c","Array","fill","subtract","findChromaticPolynomial","isDisconnected","order","firstEdge","findFirstEdge","removeEdge","removeMergeEdge","polynomial","console","log","reverse","map","ar","cofficient","xterm","Main","useState","setVector","result","setResult","className","onSubmit","e","preventDefault","htmlFor","type","placeholder","id","onFocus","target","select","autoComplete","value","onChange","nativeEvent","data","inputType","disabled","abs","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a3a706b.chunk.js","sourcesContent":["export function isProperSize(vectorLength) {\r\n  return vectorLength > 0 && Math.sqrt(1 + 8 * vectorLength) % 1 === 0;\r\n}\r\n\r\nfunction isDisconnected(vector) {\r\n  if (vector === '') return true;\r\n  //console.log(vector);\r\n  for (let i = 0; i < vector.length; i++) {\r\n    if (vector[i] !== '0') {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction findFirstEdge(vector) {\r\n  for (let i = 0; i < vector.length; i++) {\r\n    if (vector[i] === '1') {\r\n      return i;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getOrder(vectorLength) {\r\n  return (1 + Math.sqrt(1 + 8 * vectorLength)) / 2;\r\n}\r\n\r\nfunction removeEdge(vector, index) {\r\n  return vector.substring(0, index) + '0' + vector.substring(index + 1);\r\n}\r\n\r\nfunction calcLowerLimit(k, n) {\r\n  return (k - 1) * n - (k * (k - 1)) / 2;\r\n}\r\n\r\nfunction calcHigherLimit(k, n) {\r\n  return (k - 1) * n - (k * (k - 1)) / 2 + n - k;\r\n}\r\n\r\nfunction calculateVertex(n, i) {\r\n  let sqr = 4 * n ** 2 - 4 * n + 1 - 8 * i;\r\n  // let x1 = (2 * n + 1 + Math.sqrt(sqr)) / 2;\r\n  let x2 = (2 * n + 1 - Math.sqrt(sqr)) / 2;\r\n  // console.log(Math.ceil(x1));\r\n  return Math.floor(x2);\r\n}\r\n\r\nfunction mergeEdge(vector, index) {\r\n  let n = getOrder(vector.length);\r\n  let k = calculateVertex(n, index);\r\n  let initialLowerLimit = calcLowerLimit(k, n);\r\n  let initialHigherLimit = calcHigherLimit(k, n);\r\n  let mergeVertexIndex = index - initialLowerLimit + k + 1;\r\n  let finalLowerLimit = calcLowerLimit(mergeVertexIndex, n);\r\n  let finalHigherLimit = calcHigherLimit(mergeVertexIndex, n);\r\n  let y = vector.substring(finalLowerLimit, finalHigherLimit);\r\n  let x = vector.substring(initialLowerLimit, initialHigherLimit);\r\n  let xy = merge(x, y);\r\n  let finalVector = '';\r\n  for (let i = 1; i < k; i++) {\r\n    let iThVertexLowerLimit = calcLowerLimit(i, n);\r\n    let iThVertexHigherLimit = calcHigherLimit(i, n);\r\n    let currentVector = vector.substring(\r\n      iThVertexLowerLimit,\r\n      iThVertexHigherLimit\r\n    );\r\n    finalVector +=\r\n      currentVector.substring(0, k - i - 1) + currentVector.substring(k - i);\r\n  }\r\n  finalVector +=\r\n    vector.substring(initialHigherLimit, finalLowerLimit) +\r\n    xy +\r\n    vector.substring(finalHigherLimit);\r\n  //   console.log(finalVector, vector, k, index, 'line63');\r\n  return finalVector;\r\n  function merge(x, y) {\r\n    let z = '';\r\n    let k = x.length - 1;\r\n    for (let i = y.length - 1; i >= 0; i--) {\r\n      if (x[k--] === '1' || y[i] === '1') z = '1' + z;\r\n      else z = '0' + z;\r\n    }\r\n    return z;\r\n  }\r\n}\r\n\r\nfunction removeMergeEdge(vector) {\r\n  let firstEdge = findFirstEdge(vector);\r\n  let x = removeEdge(vector, firstEdge);\r\n  let y = mergeEdge(vector, firstEdge);\r\n  // console.log(vector, y, firstEdge, 'line75');\r\n  return [x, y];\r\n}\r\n\r\nfunction subtract(m1, m2) {\r\n  let max = Math.max(m1.length, m2.length);\r\n  let c = Array(max).fill(0);\r\n  for (let i = 0; i < max; i++) {\r\n    if (m1.length > i) {\r\n      c[i] += m1[i];\r\n    }\r\n    if (m2.length > i) {\r\n      c[i] -= m2[i];\r\n    }\r\n  }\r\n  return c;\r\n}\r\n\r\nfunction chromaticPolynomial(vector1, vector2) {\r\n  let left = findChromaticPolynomial(vector1);\r\n  let right = findChromaticPolynomial(vector2);\r\n  // console.log(left, right, vector1, vector2, 'line 82');\r\n  return subtract(left, right);\r\n}\r\n\r\nexport default function findChromaticPolynomial(vector) {\r\n  if (isDisconnected(vector)) {\r\n    let order = getOrder(vector.length);\r\n    let x = Array(order).fill(0);\r\n    x[order - 1] = 1;\r\n    return x;\r\n  }\r\n  let [vector1, vector2] = removeMergeEdge(vector);\r\n  let x = chromaticPolynomial(vector1, vector2);\r\n  return x;\r\n}\r\n\r\nlet adjacencyVector = '100011101100111';\r\nlet polynomial = findChromaticPolynomial(adjacencyVector);\r\nconsole.log(polynomial);\r\nconsole.log('101010', findChromaticPolynomial('101010').reverse());\r\n\r\nconsole.log(\r\n  polynomial.map((x, index, ar) => {\r\n    return {\r\n      cofficient: x,\r\n      xterm: (\r\n        <span>\r\n          x<sup>{ar.length - index}</sup>\r\n        </span>\r\n      ),\r\n    };\r\n  })\r\n);\r\n","import React, { useState } from 'react';\r\nimport findChromaticPolynomial, { isProperSize } from '../logic/logic';\r\nimport '../scss/main.scss';\r\n\r\nexport default function Main() {\r\n  const [vector, setVector] = useState('');\r\n  const [result, setResult] = useState([]);\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    setResult(() => findChromaticPolynomial(vector).reverse());\r\n  }\r\n  function handleChange(e) {\r\n    if (e.target.value.length > 45) return;\r\n    if (\r\n      e.nativeEvent.data === '1' ||\r\n      e.nativeEvent.data === '0' ||\r\n      e.nativeEvent.inputType === 'deleteContentBackward'\r\n    ) {\r\n      setVector(e.target.value);\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"Main\">\r\n      <div className=\"container\">\r\n        <h1 className=\"heading\">Chromatic Polynomial</h1>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-control\">\r\n            <label htmlFor=\"vector\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Enter the adjacency vector of the graph\"\r\n                className=\"vector\"\r\n                id=\"vector\"\r\n                onFocus={(e) => e.target.select()}\r\n                autoComplete=\"off\"\r\n                value={vector}\r\n                onChange={handleChange}\r\n              />\r\n              <small>\r\n                Adjacency vector consists of 0s and 1s only and its size is\r\n                equal to n(n-1)/2 for any integer n\r\n              </small>\r\n            </label>\r\n          </div>\r\n          <div className=\"form-control\">\r\n            <button\r\n              className=\"calculate-btn\"\r\n              disabled={!isProperSize(vector.length)}\r\n            >\r\n              Calculate\r\n            </button>\r\n          </div>\r\n        </form>\r\n        <div className=\"result\">\r\n          <div>\r\n            {result.length !== 0 && <span>P(x) = </span>}\r\n            {result.map((x, index, ar) => {\r\n              if (index === 0) {\r\n                return (\r\n                  <span key={index}>\r\n                    <span>\r\n                      &#119909;\r\n                      <sup>\r\n                        {ar.length - index === 1 ? '' : ar.length - index}\r\n                      </sup>\r\n                    </span>\r\n                  </span>\r\n                );\r\n              }\r\n              return (\r\n                <span key={index}>\r\n                  {x !== 0 && (\r\n                    <span>\r\n                      <span>\r\n                        {Math.abs(x) === 1\r\n                          ? x > 0\r\n                            ? ` + `\r\n                            : ` - `\r\n                          : x > 0\r\n                          ? ` + ${x}`\r\n                          : ` - ${Math.abs(x)}`}\r\n                      </span>\r\n                      <span>\r\n                        &#119909;\r\n                        <sup>\r\n                          {ar.length - index === 1 ? '' : ar.length - index}\r\n                        </sup>\r\n                      </span>\r\n                    </span>\r\n                  )}\r\n                </span>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"instruction\">\r\n        <h2>FAQ</h2>\r\n        <div className=\"question\">What is adjacency vector of the Graph? </div>\r\n        <div className=\"answer\">\r\n          <div>\r\n            It is simple! It is just a minified version of Adjacency List, so it\r\n            is easy to write in one single line\r\n          </div>\r\n          <div>\r\n            For, example - the adjacency list for a Graph with 4 nodes,\r\n            <p>{'1 -> 3'}</p>\r\n            <p>{'2 -> 3,4'}</p>\r\n            <p>{'3 -> 4'}</p>\r\n            can be written as, '010111'\r\n            <p>\r\n              The first three numbers '010' - explains vertex 1 is connected to\r\n              vertex 3 but not connected to vertices 2 and 4\r\n            </p>\r\n            <p>\r\n              The next two numbers '11' - explains vertex 2 is connected to both\r\n              vertices 3 and 4\r\n            </p>\r\n            <p>\r\n              The final number '1' - explains vertex 3 is connected to vertex 4\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import Main from './component/Main';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}